// Code generated by github.com/cogentcore/webgpu/cmd/enums; DO NOT EDIT.

package wgpu

type AdapterType uint32

const (
	AdapterTypeDiscreteGPU   AdapterType = 0x00000001
	AdapterTypeIntegratedGPU AdapterType = 0x00000002
	AdapterTypeCPU           AdapterType = 0x00000003
	AdapterTypeUnknown       AdapterType = 0x00000004
)

func (v AdapterType) String() string {
	switch v {
	case AdapterTypeDiscreteGPU:
		return "discrete-gpu"
	case AdapterTypeIntegratedGPU:
		return "integrated-gpu"
	case AdapterTypeCPU:
		return "cpu"
	case AdapterTypeUnknown:
		return "unknown"
	default:
		return ""
	}
}

type AddressMode uint32

const (
	AddressModeUndefined    AddressMode = 0x00000000
	AddressModeClampToEdge  AddressMode = 0x00000001
	AddressModeRepeat       AddressMode = 0x00000002
	AddressModeMirrorRepeat AddressMode = 0x00000003
)

func (v AddressMode) String() string {
	switch v {
	case AddressModeUndefined:
		return "undefined"
	case AddressModeClampToEdge:
		return "clamp-to-edge"
	case AddressModeRepeat:
		return "repeat"
	case AddressModeMirrorRepeat:
		return "mirror-repeat"
	default:
		return ""
	}
}

type BackendType uint32

const (
	BackendTypeUndefined BackendType = 0x00000000
	BackendTypeNull      BackendType = 0x00000001
	BackendTypeWebGPU    BackendType = 0x00000002
	BackendTypeD3D11     BackendType = 0x00000003
	BackendTypeD3D12     BackendType = 0x00000004
	BackendTypeMetal     BackendType = 0x00000005
	BackendTypeVulkan    BackendType = 0x00000006
	BackendTypeOpenGL    BackendType = 0x00000007
	BackendTypeOpenGLES  BackendType = 0x00000008
)

func (v BackendType) String() string {
	switch v {
	case BackendTypeUndefined:
		return "undefined"
	case BackendTypeNull:
		return "null"
	case BackendTypeWebGPU:
		return "web-gpu"
	case BackendTypeD3D11:
		return "d3d11"
	case BackendTypeD3D12:
		return "d3d12"
	case BackendTypeMetal:
		return "metal"
	case BackendTypeVulkan:
		return "vulkan"
	case BackendTypeOpenGL:
		return "open-gl"
	case BackendTypeOpenGLES:
		return "open-gles"
	default:
		return ""
	}
}

type BlendFactor uint32

const (
	BlendFactorUndefined         BlendFactor = 0x00000000
	BlendFactorZero              BlendFactor = 0x00000001
	BlendFactorOne               BlendFactor = 0x00000002
	BlendFactorSrc               BlendFactor = 0x00000003
	BlendFactorOneMinusSrc       BlendFactor = 0x00000004
	BlendFactorSrcAlpha          BlendFactor = 0x00000005
	BlendFactorOneMinusSrcAlpha  BlendFactor = 0x00000006
	BlendFactorDst               BlendFactor = 0x00000007
	BlendFactorOneMinusDst       BlendFactor = 0x00000008
	BlendFactorDstAlpha          BlendFactor = 0x00000009
	BlendFactorOneMinusDstAlpha  BlendFactor = 0x0000000A
	BlendFactorSrcAlphaSaturated BlendFactor = 0x0000000B
	BlendFactorConstant          BlendFactor = 0x0000000C
	BlendFactorOneMinusConstant  BlendFactor = 0x0000000D
	BlendFactorSrc1              BlendFactor = 0x0000000E
	BlendFactorOneMinusSrc1      BlendFactor = 0x0000000F
	BlendFactorSrc1Alpha         BlendFactor = 0x00000010
	BlendFactorOneMinusSrc1Alpha BlendFactor = 0x00000011
)

func (v BlendFactor) String() string {
	switch v {
	case BlendFactorUndefined:
		return "undefined"
	case BlendFactorZero:
		return "zero"
	case BlendFactorOne:
		return "one"
	case BlendFactorSrc:
		return "src"
	case BlendFactorOneMinusSrc:
		return "one-minus-src"
	case BlendFactorSrcAlpha:
		return "src-alpha"
	case BlendFactorOneMinusSrcAlpha:
		return "one-minus-src-alpha"
	case BlendFactorDst:
		return "dst"
	case BlendFactorOneMinusDst:
		return "one-minus-dst"
	case BlendFactorDstAlpha:
		return "dst-alpha"
	case BlendFactorOneMinusDstAlpha:
		return "one-minus-dst-alpha"
	case BlendFactorSrcAlphaSaturated:
		return "src-alpha-saturated"
	case BlendFactorConstant:
		return "constant"
	case BlendFactorOneMinusConstant:
		return "one-minus-constant"
	case BlendFactorSrc1:
		return "src1"
	case BlendFactorOneMinusSrc1:
		return "one-minus-src1"
	case BlendFactorSrc1Alpha:
		return "src1alpha"
	case BlendFactorOneMinusSrc1Alpha:
		return "one-minus-src1alpha"
	default:
		return ""
	}
}

type BlendOperation uint32

const (
	BlendOperationUndefined       BlendOperation = 0x00000000
	BlendOperationAdd             BlendOperation = 0x00000001
	BlendOperationSubtract        BlendOperation = 0x00000002
	BlendOperationReverseSubtract BlendOperation = 0x00000003
	BlendOperationMin             BlendOperation = 0x00000004
	BlendOperationMax             BlendOperation = 0x00000005
)

func (v BlendOperation) String() string {
	switch v {
	case BlendOperationUndefined:
		return "undefined"
	case BlendOperationAdd:
		return "add"
	case BlendOperationSubtract:
		return "subtract"
	case BlendOperationReverseSubtract:
		return "reverse-subtract"
	case BlendOperationMin:
		return "min"
	case BlendOperationMax:
		return "max"
	default:
		return ""
	}
}

type BufferBindingType uint32

const (
	BufferBindingTypeBindingNotUsed  BufferBindingType = 0x00000000
	BufferBindingTypeUndefined       BufferBindingType = 0x00000001
	BufferBindingTypeUniform         BufferBindingType = 0x00000002
	BufferBindingTypeStorage         BufferBindingType = 0x00000003
	BufferBindingTypeReadOnlyStorage BufferBindingType = 0x00000004
)

func (v BufferBindingType) String() string {
	switch v {
	case BufferBindingTypeBindingNotUsed:
		return "binding-not-used"
	case BufferBindingTypeUndefined:
		return "undefined"
	case BufferBindingTypeUniform:
		return "uniform"
	case BufferBindingTypeStorage:
		return "storage"
	case BufferBindingTypeReadOnlyStorage:
		return "read-only-storage"
	default:
		return ""
	}
}

type BufferMapState uint32

const (
	BufferMapStateUnmapped BufferMapState = 0x00000001
	BufferMapStatePending  BufferMapState = 0x00000002
	BufferMapStateMapped   BufferMapState = 0x00000003
)

func (v BufferMapState) String() string {
	switch v {
	case BufferMapStateUnmapped:
		return "unmapped"
	case BufferMapStatePending:
		return "pending"
	case BufferMapStateMapped:
		return "mapped"
	default:
		return ""
	}
}

type CallbackMode uint32

const (
	CallbackModeWaitAnyOnly        CallbackMode = 0x00000001
	CallbackModeAllowProcessEvents CallbackMode = 0x00000002
	CallbackModeAllowSpontaneous   CallbackMode = 0x00000003
)

func (v CallbackMode) String() string {
	switch v {
	case CallbackModeWaitAnyOnly:
		return "wait-any-only"
	case CallbackModeAllowProcessEvents:
		return "allow-process-events"
	case CallbackModeAllowSpontaneous:
		return "allow-spontaneous"
	default:
		return ""
	}
}

type CompareFunction uint32

const (
	CompareFunctionUndefined    CompareFunction = 0x00000000
	CompareFunctionNever        CompareFunction = 0x00000001
	CompareFunctionLess         CompareFunction = 0x00000002
	CompareFunctionEqual        CompareFunction = 0x00000003
	CompareFunctionLessEqual    CompareFunction = 0x00000004
	CompareFunctionGreater      CompareFunction = 0x00000005
	CompareFunctionNotEqual     CompareFunction = 0x00000006
	CompareFunctionGreaterEqual CompareFunction = 0x00000007
	CompareFunctionAlways       CompareFunction = 0x00000008
)

func (v CompareFunction) String() string {
	switch v {
	case CompareFunctionUndefined:
		return "undefined"
	case CompareFunctionNever:
		return "never"
	case CompareFunctionLess:
		return "less"
	case CompareFunctionEqual:
		return "equal"
	case CompareFunctionLessEqual:
		return "less-equal"
	case CompareFunctionGreater:
		return "greater"
	case CompareFunctionNotEqual:
		return "not-equal"
	case CompareFunctionGreaterEqual:
		return "greater-equal"
	case CompareFunctionAlways:
		return "always"
	default:
		return ""
	}
}

type CompilationInfoRequestStatus uint32

const (
	CompilationInfoRequestStatusSuccess         CompilationInfoRequestStatus = 0x00000001
	CompilationInfoRequestStatusInstanceDropped CompilationInfoRequestStatus = 0x00000002
	CompilationInfoRequestStatusError           CompilationInfoRequestStatus = 0x00000003
	CompilationInfoRequestStatusUnknown         CompilationInfoRequestStatus = 0x00000004
)

func (v CompilationInfoRequestStatus) String() string {
	switch v {
	case CompilationInfoRequestStatusSuccess:
		return "success"
	case CompilationInfoRequestStatusInstanceDropped:
		return "instance-dropped"
	case CompilationInfoRequestStatusError:
		return "error"
	case CompilationInfoRequestStatusUnknown:
		return "unknown"
	default:
		return ""
	}
}

type CompilationMessageType uint32

const (
	CompilationMessageTypeError   CompilationMessageType = 0x00000001
	CompilationMessageTypeWarning CompilationMessageType = 0x00000002
	CompilationMessageTypeInfo    CompilationMessageType = 0x00000003
)

func (v CompilationMessageType) String() string {
	switch v {
	case CompilationMessageTypeError:
		return "error"
	case CompilationMessageTypeWarning:
		return "warning"
	case CompilationMessageTypeInfo:
		return "info"
	default:
		return ""
	}
}

type CompositeAlphaMode uint32

const (
	CompositeAlphaModeAuto            CompositeAlphaMode = 0x00000000
	CompositeAlphaModeOpaque          CompositeAlphaMode = 0x00000001
	CompositeAlphaModePremultiplied   CompositeAlphaMode = 0x00000002
	CompositeAlphaModeUnpremultiplied CompositeAlphaMode = 0x00000003
	CompositeAlphaModeInherit         CompositeAlphaMode = 0x00000004
)

func (v CompositeAlphaMode) String() string {
	switch v {
	case CompositeAlphaModeAuto:
		return "auto"
	case CompositeAlphaModeOpaque:
		return "opaque"
	case CompositeAlphaModePremultiplied:
		return "premultiplied"
	case CompositeAlphaModeUnpremultiplied:
		return "unpremultiplied"
	case CompositeAlphaModeInherit:
		return "inherit"
	default:
		return ""
	}
}

type CreatePipelineAsyncStatus uint32

const (
	CreatePipelineAsyncStatusSuccess         CreatePipelineAsyncStatus = 0x00000001
	CreatePipelineAsyncStatusInstanceDropped CreatePipelineAsyncStatus = 0x00000002
	CreatePipelineAsyncStatusValidationError CreatePipelineAsyncStatus = 0x00000003
	CreatePipelineAsyncStatusInternalError   CreatePipelineAsyncStatus = 0x00000004
	CreatePipelineAsyncStatusUnknown         CreatePipelineAsyncStatus = 0x00000005
)

func (v CreatePipelineAsyncStatus) String() string {
	switch v {
	case CreatePipelineAsyncStatusSuccess:
		return "success"
	case CreatePipelineAsyncStatusInstanceDropped:
		return "instance-dropped"
	case CreatePipelineAsyncStatusValidationError:
		return "validation-error"
	case CreatePipelineAsyncStatusInternalError:
		return "internal-error"
	case CreatePipelineAsyncStatusUnknown:
		return "unknown"
	default:
		return ""
	}
}

type CullMode uint32

const (
	CullModeUndefined CullMode = 0x00000000
	CullModeNone      CullMode = 0x00000001
	CullModeFront     CullMode = 0x00000002
	CullModeBack      CullMode = 0x00000003
)

func (v CullMode) String() string {
	switch v {
	case CullModeUndefined:
		return "undefined"
	case CullModeNone:
		return "none"
	case CullModeFront:
		return "front"
	case CullModeBack:
		return "back"
	default:
		return ""
	}
}

type DeviceLostReason uint32

const (
	DeviceLostReasonUnknown         DeviceLostReason = 0x00000001
	DeviceLostReasonDestroyed       DeviceLostReason = 0x00000002
	DeviceLostReasonInstanceDropped DeviceLostReason = 0x00000003
	DeviceLostReasonFailedCreation  DeviceLostReason = 0x00000004
)

func (v DeviceLostReason) String() string {
	switch v {
	case DeviceLostReasonUnknown:
		return "unknown"
	case DeviceLostReasonDestroyed:
		return "destroyed"
	case DeviceLostReasonInstanceDropped:
		return "instance-dropped"
	case DeviceLostReasonFailedCreation:
		return "failed-creation"
	default:
		return ""
	}
}

type Dx12Compiler uint32

const (
	Dx12CompilerUndefined Dx12Compiler = 0x00000000
	Dx12CompilerFxc       Dx12Compiler = 0x00000001
	Dx12CompilerDxc       Dx12Compiler = 0x00000002
)

func (v Dx12Compiler) String() string {
	switch v {
	case Dx12CompilerUndefined:
		return "undefined"
	case Dx12CompilerFxc:
		return "fxc"
	case Dx12CompilerDxc:
		return "dxc"
	default:
		return ""
	}
}

type ErrorFilter uint32

const (
	ErrorFilterValidation  ErrorFilter = 0x00000001
	ErrorFilterOutOfMemory ErrorFilter = 0x00000002
	ErrorFilterInternal    ErrorFilter = 0x00000003
)

func (v ErrorFilter) String() string {
	switch v {
	case ErrorFilterValidation:
		return "validation"
	case ErrorFilterOutOfMemory:
		return "out-of-memory"
	case ErrorFilterInternal:
		return "internal"
	default:
		return ""
	}
}

type ErrorType uint32

const (
	ErrorTypeNoError     ErrorType = 0x00000001
	ErrorTypeValidation  ErrorType = 0x00000002
	ErrorTypeOutOfMemory ErrorType = 0x00000003
	ErrorTypeInternal    ErrorType = 0x00000004
	ErrorTypeUnknown     ErrorType = 0x00000005
)

func (v ErrorType) String() string {
	switch v {
	case ErrorTypeNoError:
		return "no-error"
	case ErrorTypeValidation:
		return "validation"
	case ErrorTypeOutOfMemory:
		return "out-of-memory"
	case ErrorTypeInternal:
		return "internal"
	case ErrorTypeUnknown:
		return "unknown"
	default:
		return "unknown"
	}
}

type FeatureLevel uint32

const (
	FeatureLevelCompatibility FeatureLevel = 0x00000001
	FeatureLevelCore          FeatureLevel = 0x00000002
)

func (v FeatureLevel) String() string {
	switch v {
	case FeatureLevelCompatibility:
		return "compatibility"
	case FeatureLevelCore:
		return "core"
	default:
		return ""
	}
}

type FeatureName uint32

const (
	FeatureNameUndefined                                               FeatureName = 0x00000000
	FeatureNameDepthClipControl                                        FeatureName = 0x00000001
	FeatureNameDepth32FloatStencil8                                    FeatureName = 0x00000002
	FeatureNameTimestampQuery                                          FeatureName = 0x00000003
	FeatureNameTextureCompressionBC                                    FeatureName = 0x00000004
	FeatureNameTextureCompressionBCSliced3D                            FeatureName = 0x00000005
	FeatureNameTextureCompressionETC2                                  FeatureName = 0x00000006
	FeatureNameTextureCompressionASTC                                  FeatureName = 0x00000007
	FeatureNameTextureCompressionASTCSliced3D                          FeatureName = 0x00000008
	FeatureNameIndirectFirstInstance                                   FeatureName = 0x00000009
	FeatureNameShaderF16                                               FeatureName = 0x0000000A
	FeatureNameRG11B10UfloatRenderable                                 FeatureName = 0x0000000B
	FeatureNameBGRA8UnormStorage                                       FeatureName = 0x0000000C
	FeatureNameFloat32Filterable                                       FeatureName = 0x0000000D
	FeatureNameFloat32Blendable                                        FeatureName = 0x0000000E
	FeatureNameClipDistances                                           FeatureName = 0x0000000F
	FeatureNameDualSourceBlending                                      FeatureName = 0x00000010
	NativeFeaturePushConstants                                         FeatureName = 0x00030001
	NativeFeatureTextureAdapterSpecificFormatFeatures                  FeatureName = 0x00030002
	NativeFeatureMultiDrawIndirect                                     FeatureName = 0x00030003
	NativeFeatureMultiDrawIndirectCount                                FeatureName = 0x00030004
	NativeFeatureVertexWritableStorage                                 FeatureName = 0x00030005
	NativeFeatureTextureBindingArray                                   FeatureName = 0x00030006
	NativeFeatureSampledTextureAndStorageBufferArrayNonUniformIndexing FeatureName = 0x00030007
	NativeFeaturePipelineStatisticsQuery                               FeatureName = 0x00030008
	NativeFeatureStorageResourceBindingArray                           FeatureName = 0x00030009
	NativeFeaturePartiallyBoundBindingArray                            FeatureName = 0x0003000A
	NativeFeatureTextureFormat16bitNorm                                FeatureName = 0x0003000B
	NativeFeatureTextureCompressionAstcHdr                             FeatureName = 0x0003000C
	NativeFeatureMappablePrimaryBuffers                                FeatureName = 0x0003000E
	NativeFeatureBufferBindingArray                                    FeatureName = 0x0003000F
	NativeFeatureUniformBufferAndStorageTextureArrayNonUniformIndexing FeatureName = 0x00030010
	NativeFeatureSpirvShaderPassthrough                                FeatureName = 0x00030017
	NativeFeatureVertexAttribute64bit                                  FeatureName = 0x00030019
	NativeFeatureTextureFormatNv12                                     FeatureName = 0x0003001A
	NativeFeatureRayTracingAccelerationStructure                       FeatureName = 0x0003001B
	NativeFeatureRayQuery                                              FeatureName = 0x0003001C
	NativeFeatureShaderF64                                             FeatureName = 0x0003001D
	NativeFeatureShaderI16                                             FeatureName = 0x0003001E
	NativeFeatureShaderPrimitiveIndex                                  FeatureName = 0x0003001F
	NativeFeatureShaderEarlyDepthTest                                  FeatureName = 0x00030020
	NativeFeatureSubgroup                                              FeatureName = 0x00030021
	NativeFeatureSubgroupVertex                                        FeatureName = 0x00030022
	NativeFeatureSubgroupBarrier                                       FeatureName = 0x00030023
	NativeFeatureTimestampQueryInsideEncoders                          FeatureName = 0x00030024
	NativeFeatureTimestampQueryInsidePasses                            FeatureName = 0x00030025
)

func (v FeatureName) String() string {
	switch v {
	case FeatureNameUndefined:
		return "undefined"
	case FeatureNameDepthClipControl:
		return "depth-clip-control"
	case FeatureNameDepth32FloatStencil8:
		return "depth32float-stencil8"
	case FeatureNameTimestampQuery:
		return "timestamp-query"
	case FeatureNameTextureCompressionBC:
		return "texture-compression-bc"
	case FeatureNameTextureCompressionBCSliced3D:
		return "texture-compression-bc-sliced3d"
	case FeatureNameTextureCompressionETC2:
		return "texture-compression-etc2"
	case FeatureNameTextureCompressionASTC:
		return "texture-compression-astc"
	case FeatureNameTextureCompressionASTCSliced3D:
		return "texture-compression-astc-sliced3d"
	case FeatureNameIndirectFirstInstance:
		return "indirect-first-instance"
	case FeatureNameShaderF16:
		return "shader-f16"
	case FeatureNameRG11B10UfloatRenderable:
		return "rg11b10ufloat-renderable"
	case FeatureNameBGRA8UnormStorage:
		return "bgra8unorm-storage"
	case FeatureNameFloat32Filterable:
		return "float32filterable"
	case FeatureNameFloat32Blendable:
		return "float32blendable"
	case FeatureNameClipDistances:
		return "clip-distances"
	case FeatureNameDualSourceBlending:
		return "dual-source-blending"
	case NativeFeaturePushConstants:
		return "native-feature-push-constants"
	case NativeFeatureTextureAdapterSpecificFormatFeatures:
		return "native-feature-texture-adapter-specific-format-features"
	case NativeFeatureMultiDrawIndirect:
		return "native-feature-multi-draw-indirect"
	case NativeFeatureMultiDrawIndirectCount:
		return "native-feature-multi-draw-indirect-count"
	case NativeFeatureVertexWritableStorage:
		return "native-feature-vertex-writable-storage"
	case NativeFeatureTextureBindingArray:
		return "native-feature-texture-binding-array"
	case NativeFeatureSampledTextureAndStorageBufferArrayNonUniformIndexing:
		return "native-feature-sampled-texture-and-storage-buffer-array-non-uniform-indexing"
	case NativeFeaturePipelineStatisticsQuery:
		return "native-feature-pipeline-statistics-query"
	case NativeFeatureStorageResourceBindingArray:
		return "native-feature-storage-resource-binding-array"
	case NativeFeaturePartiallyBoundBindingArray:
		return "native-feature-partially-bound-binding-array"
	case NativeFeatureTextureFormat16bitNorm:
		return "native-feature-texture-format16bit-norm"
	case NativeFeatureTextureCompressionAstcHdr:
		return "native-feature-texture-compression-astc-hdr"
	case NativeFeatureMappablePrimaryBuffers:
		return "native-feature-mappable-primary-buffers"
	case NativeFeatureBufferBindingArray:
		return "native-feature-buffer-binding-array"
	case NativeFeatureUniformBufferAndStorageTextureArrayNonUniformIndexing:
		return "native-feature-uniform-buffer-and-storage-texture-array-non-uniform-indexing"
	case NativeFeatureSpirvShaderPassthrough:
		return "native-feature-spirv-shader-passthrough"
	case NativeFeatureVertexAttribute64bit:
		return "native-feature-vertex-attribute64bit"
	case NativeFeatureTextureFormatNv12:
		return "native-feature-texture-format-nv12"
	case NativeFeatureRayTracingAccelerationStructure:
		return "native-feature-ray-tracing-acceleration-structure"
	case NativeFeatureRayQuery:
		return "native-feature-ray-query"
	case NativeFeatureShaderF64:
		return "native-feature-shader-f64"
	case NativeFeatureShaderI16:
		return "native-feature-shader-i16"
	case NativeFeatureShaderPrimitiveIndex:
		return "native-feature-shader-primitive-index"
	case NativeFeatureShaderEarlyDepthTest:
		return "native-feature-shader-early-depth-test"
	case NativeFeatureSubgroup:
		return "native-feature-subgroup"
	case NativeFeatureSubgroupVertex:
		return "native-feature-subgroup-vertex"
	case NativeFeatureSubgroupBarrier:
		return "native-feature-subgroup-barrier"
	case NativeFeatureTimestampQueryInsideEncoders:
		return "native-feature-timestamp-query-inside-encoders"
	case NativeFeatureTimestampQueryInsidePasses:
		return "native-feature-timestamp-query-inside-passes"
	default:
		return ""
	}
}

type FilterMode uint32

const (
	FilterModeUndefined FilterMode = 0x00000000
	FilterModeNearest   FilterMode = 0x00000001
	FilterModeLinear    FilterMode = 0x00000002
)

func (v FilterMode) String() string {
	switch v {
	case FilterModeUndefined:
		return "undefined"
	case FilterModeNearest:
		return "nearest"
	case FilterModeLinear:
		return "linear"
	default:
		return ""
	}
}

type FrontFace uint32

const (
	FrontFaceUndefined FrontFace = 0x00000000
	FrontFaceCCW       FrontFace = 0x00000001
	FrontFaceCW        FrontFace = 0x00000002
)

func (v FrontFace) String() string {
	switch v {
	case FrontFaceUndefined:
		return "undefined"
	case FrontFaceCCW:
		return "ccw"
	case FrontFaceCW:
		return "cw"
	default:
		return ""
	}
}

type Gles3MinorVersion uint32

const (
	Gles3MinorVersionAutomatic Gles3MinorVersion = 0x00000000
	Gles3MinorVersionVersion0  Gles3MinorVersion = 0x00000001
	Gles3MinorVersionVersion1  Gles3MinorVersion = 0x00000002
	Gles3MinorVersionVersion2  Gles3MinorVersion = 0x00000003
)

func (v Gles3MinorVersion) String() string {
	switch v {
	case Gles3MinorVersionAutomatic:
		return "automatic"
	case Gles3MinorVersionVersion0:
		return "version0"
	case Gles3MinorVersionVersion1:
		return "version1"
	case Gles3MinorVersionVersion2:
		return "version2"
	default:
		return ""
	}
}

type IndexFormat uint32

const (
	IndexFormatUndefined IndexFormat = 0x00000000
	IndexFormatUint16    IndexFormat = 0x00000001
	IndexFormatUint32    IndexFormat = 0x00000002
)

func (v IndexFormat) String() string {
	switch v {
	case IndexFormatUndefined:
		return "undefined"
	case IndexFormatUint16:
		return "uint16"
	case IndexFormatUint32:
		return "uint32"
	default:
		return ""
	}
}

type LoadOp uint32

const (
	LoadOpUndefined LoadOp = 0x00000000
	LoadOpLoad      LoadOp = 0x00000001
	LoadOpClear     LoadOp = 0x00000002
)

func (v LoadOp) String() string {
	switch v {
	case LoadOpUndefined:
		return "undefined"
	case LoadOpLoad:
		return "load"
	case LoadOpClear:
		return "clear"
	default:
		return ""
	}
}

type LogLevel uint32

const (
	LogLevelOff   LogLevel = 0x00000000
	LogLevelError LogLevel = 0x00000001
	LogLevelWarn  LogLevel = 0x00000002
	LogLevelInfo  LogLevel = 0x00000003
	LogLevelDebug LogLevel = 0x00000004
	LogLevelTrace LogLevel = 0x00000005
)

func (v LogLevel) String() string {
	switch v {
	case LogLevelOff:
		return "off"
	case LogLevelError:
		return "error"
	case LogLevelWarn:
		return "warn"
	case LogLevelInfo:
		return "info"
	case LogLevelDebug:
		return "debug"
	case LogLevelTrace:
		return "trace"
	default:
		return ""
	}
}

type MapAsyncStatus uint32

const (
	MapAsyncStatusSuccess         MapAsyncStatus = 0x00000001
	MapAsyncStatusInstanceDropped MapAsyncStatus = 0x00000002
	MapAsyncStatusError           MapAsyncStatus = 0x00000003
	MapAsyncStatusAborted         MapAsyncStatus = 0x00000004
	MapAsyncStatusUnknown         MapAsyncStatus = 0x00000005
)

func (v MapAsyncStatus) String() string {
	switch v {
	case MapAsyncStatusSuccess:
		return "success"
	case MapAsyncStatusInstanceDropped:
		return "instance-dropped"
	case MapAsyncStatusError:
		return "error"
	case MapAsyncStatusAborted:
		return "aborted"
	case MapAsyncStatusUnknown:
		return "unknown"
	default:
		return ""
	}
}

type MipmapFilterMode uint32

const (
	MipmapFilterModeUndefined MipmapFilterMode = 0x00000000
	MipmapFilterModeNearest   MipmapFilterMode = 0x00000001
	MipmapFilterModeLinear    MipmapFilterMode = 0x00000002
)

func (v MipmapFilterMode) String() string {
	switch v {
	case MipmapFilterModeUndefined:
		return "undefined"
	case MipmapFilterModeNearest:
		return "nearest"
	case MipmapFilterModeLinear:
		return "linear"
	default:
		return ""
	}
}

type NativeQueryType uint32

const NativeQueryTypePipelineStatistics NativeQueryType = 0x00030000

func (v NativeQueryType) String() string {
	switch v {
	case NativeQueryTypePipelineStatistics:
		return "pipeline-statistics"
	default:
		return ""
	}
}

type NativeTextureFormat uint32

const (
	NativeTextureFormatR16Unorm    NativeTextureFormat = 0x00030001
	NativeTextureFormatR16Snorm    NativeTextureFormat = 0x00030002
	NativeTextureFormatRg16Unorm   NativeTextureFormat = 0x00030003
	NativeTextureFormatRg16Snorm   NativeTextureFormat = 0x00030004
	NativeTextureFormatRgba16Unorm NativeTextureFormat = 0x00030005
	NativeTextureFormatRgba16Snorm NativeTextureFormat = 0x00030006
	NativeTextureFormatNV12        NativeTextureFormat = 0x00030007
)

func (v NativeTextureFormat) String() string {
	switch v {
	case NativeTextureFormatR16Unorm:
		return "r16unorm"
	case NativeTextureFormatR16Snorm:
		return "r16snorm"
	case NativeTextureFormatRg16Unorm:
		return "rg16unorm"
	case NativeTextureFormatRg16Snorm:
		return "rg16snorm"
	case NativeTextureFormatRgba16Unorm:
		return "rgba16unorm"
	case NativeTextureFormatRgba16Snorm:
		return "rgba16snorm"
	case NativeTextureFormatNV12:
		return "nv12"
	default:
		return ""
	}
}

type OptionalBool uint32

const (
	OptionalBoolFalse     OptionalBool = 0x00000000
	OptionalBoolTrue      OptionalBool = 0x00000001
	OptionalBoolUndefined OptionalBool = 0x00000002
)

func (v OptionalBool) String() string {
	switch v {
	case OptionalBoolFalse:
		return "false"
	case OptionalBoolTrue:
		return "true"
	case OptionalBoolUndefined:
		return "undefined"
	default:
		return ""
	}
}

type PipelineStatisticName uint32

const (
	PipelineStatisticNameVertexShaderInvocations   PipelineStatisticName = 0x00000000
	PipelineStatisticNameClipperInvocations        PipelineStatisticName = 0x00000001
	PipelineStatisticNameClipperPrimitivesOut      PipelineStatisticName = 0x00000002
	PipelineStatisticNameFragmentShaderInvocations PipelineStatisticName = 0x00000003
	PipelineStatisticNameComputeShaderInvocations  PipelineStatisticName = 0x00000004
)

func (v PipelineStatisticName) String() string {
	switch v {
	case PipelineStatisticNameVertexShaderInvocations:
		return "vertex-shader-invocations"
	case PipelineStatisticNameClipperInvocations:
		return "clipper-invocations"
	case PipelineStatisticNameClipperPrimitivesOut:
		return "clipper-primitives-out"
	case PipelineStatisticNameFragmentShaderInvocations:
		return "fragment-shader-invocations"
	case PipelineStatisticNameComputeShaderInvocations:
		return "compute-shader-invocations"
	default:
		return ""
	}
}

type PopErrorScopeStatus uint32

const (
	PopErrorScopeStatusSuccess         PopErrorScopeStatus = 0x00000001
	PopErrorScopeStatusInstanceDropped PopErrorScopeStatus = 0x00000002
	PopErrorScopeStatusEmptyStack      PopErrorScopeStatus = 0x00000003
)

func (v PopErrorScopeStatus) String() string {
	switch v {
	case PopErrorScopeStatusSuccess:
		return "success"
	case PopErrorScopeStatusInstanceDropped:
		return "instance-dropped"
	case PopErrorScopeStatusEmptyStack:
		return "empty-stack"
	default:
		return ""
	}
}

type PowerPreference uint32

const (
	PowerPreferenceUndefined       PowerPreference = 0x00000000
	PowerPreferenceLowPower        PowerPreference = 0x00000001
	PowerPreferenceHighPerformance PowerPreference = 0x00000002
)

func (v PowerPreference) String() string {
	switch v {
	case PowerPreferenceUndefined:
		return "undefined"
	case PowerPreferenceLowPower:
		return "low-power"
	case PowerPreferenceHighPerformance:
		return "high-performance"
	default:
		return ""
	}
}

type PresentMode uint32

const (
	PresentModeUndefined   PresentMode = 0x00000000
	PresentModeFifo        PresentMode = 0x00000001
	PresentModeFifoRelaxed PresentMode = 0x00000002
	PresentModeImmediate   PresentMode = 0x00000003
	PresentModeMailbox     PresentMode = 0x00000004
)

func (v PresentMode) String() string {
	switch v {
	case PresentModeUndefined:
		return "undefined"
	case PresentModeFifo:
		return "fifo"
	case PresentModeFifoRelaxed:
		return "fifo-relaxed"
	case PresentModeImmediate:
		return "immediate"
	case PresentModeMailbox:
		return "mailbox"
	default:
		return ""
	}
}

type PrimitiveTopology uint32

const (
	PrimitiveTopologyUndefined     PrimitiveTopology = 0x00000000
	PrimitiveTopologyPointList     PrimitiveTopology = 0x00000001
	PrimitiveTopologyLineList      PrimitiveTopology = 0x00000002
	PrimitiveTopologyLineStrip     PrimitiveTopology = 0x00000003
	PrimitiveTopologyTriangleList  PrimitiveTopology = 0x00000004
	PrimitiveTopologyTriangleStrip PrimitiveTopology = 0x00000005
)

func (v PrimitiveTopology) String() string {
	switch v {
	case PrimitiveTopologyUndefined:
		return "undefined"
	case PrimitiveTopologyPointList:
		return "point-list"
	case PrimitiveTopologyLineList:
		return "line-list"
	case PrimitiveTopologyLineStrip:
		return "line-strip"
	case PrimitiveTopologyTriangleList:
		return "triangle-list"
	case PrimitiveTopologyTriangleStrip:
		return "triangle-strip"
	default:
		return ""
	}
}

type QueryType uint32

const (
	QueryTypeOcclusion QueryType = 0x00000001
	QueryTypeTimestamp QueryType = 0x00000002
)

func (v QueryType) String() string {
	switch v {
	case QueryTypeOcclusion:
		return "occlusion"
	case QueryTypeTimestamp:
		return "timestamp"
	default:
		return ""
	}
}

type QueueWorkDoneStatus uint32

const (
	QueueWorkDoneStatusSuccess         QueueWorkDoneStatus = 0x00000001
	QueueWorkDoneStatusInstanceDropped QueueWorkDoneStatus = 0x00000002
	QueueWorkDoneStatusError           QueueWorkDoneStatus = 0x00000003
	QueueWorkDoneStatusUnknown         QueueWorkDoneStatus = 0x00000004
)

func (v QueueWorkDoneStatus) String() string {
	switch v {
	case QueueWorkDoneStatusSuccess:
		return "success"
	case QueueWorkDoneStatusInstanceDropped:
		return "instance-dropped"
	case QueueWorkDoneStatusError:
		return "error"
	case QueueWorkDoneStatusUnknown:
		return "unknown"
	default:
		return ""
	}
}

type RequestAdapterStatus uint32

const (
	RequestAdapterStatusSuccess         RequestAdapterStatus = 0x00000001
	RequestAdapterStatusInstanceDropped RequestAdapterStatus = 0x00000002
	RequestAdapterStatusUnavailable     RequestAdapterStatus = 0x00000003
	RequestAdapterStatusError           RequestAdapterStatus = 0x00000004
	RequestAdapterStatusUnknown         RequestAdapterStatus = 0x00000005
)

func (v RequestAdapterStatus) String() string {
	switch v {
	case RequestAdapterStatusSuccess:
		return "success"
	case RequestAdapterStatusInstanceDropped:
		return "instance-dropped"
	case RequestAdapterStatusUnavailable:
		return "unavailable"
	case RequestAdapterStatusError:
		return "error"
	case RequestAdapterStatusUnknown:
		return "unknown"
	default:
		return ""
	}
}

type RequestDeviceStatus uint32

const (
	RequestDeviceStatusSuccess         RequestDeviceStatus = 0x00000001
	RequestDeviceStatusInstanceDropped RequestDeviceStatus = 0x00000002
	RequestDeviceStatusError           RequestDeviceStatus = 0x00000003
	RequestDeviceStatusUnknown         RequestDeviceStatus = 0x00000004
)

func (v RequestDeviceStatus) String() string {
	switch v {
	case RequestDeviceStatusSuccess:
		return "success"
	case RequestDeviceStatusInstanceDropped:
		return "instance-dropped"
	case RequestDeviceStatusError:
		return "error"
	case RequestDeviceStatusUnknown:
		return "unknown"
	default:
		return ""
	}
}

type SamplerBindingType uint32

const (
	SamplerBindingTypeBindingNotUsed SamplerBindingType = 0x00000000
	SamplerBindingTypeUndefined      SamplerBindingType = 0x00000001
	SamplerBindingTypeFiltering      SamplerBindingType = 0x00000002
	SamplerBindingTypeNonFiltering   SamplerBindingType = 0x00000003
	SamplerBindingTypeComparison     SamplerBindingType = 0x00000004
)

func (v SamplerBindingType) String() string {
	switch v {
	case SamplerBindingTypeBindingNotUsed:
		return "binding-not-used"
	case SamplerBindingTypeUndefined:
		return "undefined"
	case SamplerBindingTypeFiltering:
		return "filtering"
	case SamplerBindingTypeNonFiltering:
		return "non-filtering"
	case SamplerBindingTypeComparison:
		return "comparison"
	default:
		return ""
	}
}

type Status uint32

const (
	StatusSuccess Status = 0x00000001
	StatusError   Status = 0x00000002
)

func (v Status) String() string {
	switch v {
	case StatusSuccess:
		return "success"
	case StatusError:
		return "error"
	default:
		return ""
	}
}

type StencilOperation uint32

const (
	StencilOperationUndefined      StencilOperation = 0x00000000
	StencilOperationKeep           StencilOperation = 0x00000001
	StencilOperationZero           StencilOperation = 0x00000002
	StencilOperationReplace        StencilOperation = 0x00000003
	StencilOperationInvert         StencilOperation = 0x00000004
	StencilOperationIncrementClamp StencilOperation = 0x00000005
	StencilOperationDecrementClamp StencilOperation = 0x00000006
	StencilOperationIncrementWrap  StencilOperation = 0x00000007
	StencilOperationDecrementWrap  StencilOperation = 0x00000008
)

func (v StencilOperation) String() string {
	switch v {
	case StencilOperationUndefined:
		return "undefined"
	case StencilOperationKeep:
		return "keep"
	case StencilOperationZero:
		return "zero"
	case StencilOperationReplace:
		return "replace"
	case StencilOperationInvert:
		return "invert"
	case StencilOperationIncrementClamp:
		return "increment-clamp"
	case StencilOperationDecrementClamp:
		return "decrement-clamp"
	case StencilOperationIncrementWrap:
		return "increment-wrap"
	case StencilOperationDecrementWrap:
		return "decrement-wrap"
	default:
		return ""
	}
}

type StorageTextureAccess uint32

const (
	StorageTextureAccessBindingNotUsed StorageTextureAccess = 0x00000000
	StorageTextureAccessUndefined      StorageTextureAccess = 0x00000001
	StorageTextureAccessWriteOnly      StorageTextureAccess = 0x00000002
	StorageTextureAccessReadOnly       StorageTextureAccess = 0x00000003
	StorageTextureAccessReadWrite      StorageTextureAccess = 0x00000004
)

func (v StorageTextureAccess) String() string {
	switch v {
	case StorageTextureAccessBindingNotUsed:
		return "binding-not-used"
	case StorageTextureAccessUndefined:
		return "undefined"
	case StorageTextureAccessWriteOnly:
		return "write-only"
	case StorageTextureAccessReadOnly:
		return "read-only"
	case StorageTextureAccessReadWrite:
		return "read-write"
	default:
		return ""
	}
}

type StoreOp uint32

const (
	StoreOpUndefined StoreOp = 0x00000000
	StoreOpStore     StoreOp = 0x00000001
	StoreOpDiscard   StoreOp = 0x00000002
)

func (v StoreOp) String() string {
	switch v {
	case StoreOpUndefined:
		return "undefined"
	case StoreOpStore:
		return "store"
	case StoreOpDiscard:
		return "discard"
	default:
		return ""
	}
}

type SurfaceGetCurrentTextureStatus uint32

const (
	SurfaceGetCurrentTextureStatusSuccessOptimal    SurfaceGetCurrentTextureStatus = 0x00000001
	SurfaceGetCurrentTextureStatusSuccessSuboptimal SurfaceGetCurrentTextureStatus = 0x00000002
	SurfaceGetCurrentTextureStatusTimeout           SurfaceGetCurrentTextureStatus = 0x00000003
	SurfaceGetCurrentTextureStatusOutdated          SurfaceGetCurrentTextureStatus = 0x00000004
	SurfaceGetCurrentTextureStatusLost              SurfaceGetCurrentTextureStatus = 0x00000005
	SurfaceGetCurrentTextureStatusOutOfMemory       SurfaceGetCurrentTextureStatus = 0x00000006
	SurfaceGetCurrentTextureStatusDeviceLost        SurfaceGetCurrentTextureStatus = 0x00000007
	SurfaceGetCurrentTextureStatusError             SurfaceGetCurrentTextureStatus = 0x00000008
)

func (v SurfaceGetCurrentTextureStatus) String() string {
	switch v {
	case SurfaceGetCurrentTextureStatusSuccessOptimal:
		return "success-optimal"
	case SurfaceGetCurrentTextureStatusSuccessSuboptimal:
		return "success-suboptimal"
	case SurfaceGetCurrentTextureStatusTimeout:
		return "timeout"
	case SurfaceGetCurrentTextureStatusOutdated:
		return "outdated"
	case SurfaceGetCurrentTextureStatusLost:
		return "lost"
	case SurfaceGetCurrentTextureStatusOutOfMemory:
		return "out-of-memory"
	case SurfaceGetCurrentTextureStatusDeviceLost:
		return "device-lost"
	case SurfaceGetCurrentTextureStatusError:
		return "error"
	default:
		return ""
	}
}

type TextureAspect uint32

const (
	TextureAspectUndefined   TextureAspect = 0x00000000
	TextureAspectAll         TextureAspect = 0x00000001
	TextureAspectStencilOnly TextureAspect = 0x00000002
	TextureAspectDepthOnly   TextureAspect = 0x00000003
)

func (v TextureAspect) String() string {
	switch v {
	case TextureAspectUndefined:
		return "undefined"
	case TextureAspectAll:
		return "all"
	case TextureAspectStencilOnly:
		return "stencil-only"
	case TextureAspectDepthOnly:
		return "depth-only"
	default:
		return ""
	}
}

type TextureDimension uint32

const (
	TextureDimensionUndefined TextureDimension = 0x00000000
	TextureDimension1D        TextureDimension = 0x00000001
	TextureDimension2D        TextureDimension = 0x00000002
	TextureDimension3D        TextureDimension = 0x00000003
)

func (v TextureDimension) String() string {
	switch v {
	case TextureDimensionUndefined:
		return "undefined"
	case TextureDimension1D:
		return "1d"
	case TextureDimension2D:
		return "2d"
	case TextureDimension3D:
		return "3d"
	default:
		return ""
	}
}

type TextureFormat uint32

const (
	TextureFormatUndefined            TextureFormat = 0x00000000
	TextureFormatR8Unorm              TextureFormat = 0x00000001
	TextureFormatR8Snorm              TextureFormat = 0x00000002
	TextureFormatR8Uint               TextureFormat = 0x00000003
	TextureFormatR8Sint               TextureFormat = 0x00000004
	TextureFormatR16Uint              TextureFormat = 0x00000005
	TextureFormatR16Sint              TextureFormat = 0x00000006
	TextureFormatR16Float             TextureFormat = 0x00000007
	TextureFormatRG8Unorm             TextureFormat = 0x00000008
	TextureFormatRG8Snorm             TextureFormat = 0x00000009
	TextureFormatRG8Uint              TextureFormat = 0x0000000A
	TextureFormatRG8Sint              TextureFormat = 0x0000000B
	TextureFormatR32Float             TextureFormat = 0x0000000C
	TextureFormatR32Uint              TextureFormat = 0x0000000D
	TextureFormatR32Sint              TextureFormat = 0x0000000E
	TextureFormatRG16Uint             TextureFormat = 0x0000000F
	TextureFormatRG16Sint             TextureFormat = 0x00000010
	TextureFormatRG16Float            TextureFormat = 0x00000011
	TextureFormatRGBA8Unorm           TextureFormat = 0x00000012
	TextureFormatRGBA8UnormSrgb       TextureFormat = 0x00000013
	TextureFormatRGBA8Snorm           TextureFormat = 0x00000014
	TextureFormatRGBA8Uint            TextureFormat = 0x00000015
	TextureFormatRGBA8Sint            TextureFormat = 0x00000016
	TextureFormatBGRA8Unorm           TextureFormat = 0x00000017
	TextureFormatBGRA8UnormSrgb       TextureFormat = 0x00000018
	TextureFormatRGB10A2Uint          TextureFormat = 0x00000019
	TextureFormatRGB10A2Unorm         TextureFormat = 0x0000001A
	TextureFormatRG11B10Ufloat        TextureFormat = 0x0000001B
	TextureFormatRGB9E5Ufloat         TextureFormat = 0x0000001C
	TextureFormatRG32Float            TextureFormat = 0x0000001D
	TextureFormatRG32Uint             TextureFormat = 0x0000001E
	TextureFormatRG32Sint             TextureFormat = 0x0000001F
	TextureFormatRGBA16Uint           TextureFormat = 0x00000020
	TextureFormatRGBA16Sint           TextureFormat = 0x00000021
	TextureFormatRGBA16Float          TextureFormat = 0x00000022
	TextureFormatRGBA32Float          TextureFormat = 0x00000023
	TextureFormatRGBA32Uint           TextureFormat = 0x00000024
	TextureFormatRGBA32Sint           TextureFormat = 0x00000025
	TextureFormatStencil8             TextureFormat = 0x00000026
	TextureFormatDepth16Unorm         TextureFormat = 0x00000027
	TextureFormatDepth24Plus          TextureFormat = 0x00000028
	TextureFormatDepth24PlusStencil8  TextureFormat = 0x00000029
	TextureFormatDepth32Float         TextureFormat = 0x0000002A
	TextureFormatDepth32FloatStencil8 TextureFormat = 0x0000002B
	TextureFormatBC1RGBAUnorm         TextureFormat = 0x0000002C
	TextureFormatBC1RGBAUnormSrgb     TextureFormat = 0x0000002D
	TextureFormatBC2RGBAUnorm         TextureFormat = 0x0000002E
	TextureFormatBC2RGBAUnormSrgb     TextureFormat = 0x0000002F
	TextureFormatBC3RGBAUnorm         TextureFormat = 0x00000030
	TextureFormatBC3RGBAUnormSrgb     TextureFormat = 0x00000031
	TextureFormatBC4RUnorm            TextureFormat = 0x00000032
	TextureFormatBC4RSnorm            TextureFormat = 0x00000033
	TextureFormatBC5RGUnorm           TextureFormat = 0x00000034
	TextureFormatBC5RGSnorm           TextureFormat = 0x00000035
	TextureFormatBC6HRGBUfloat        TextureFormat = 0x00000036
	TextureFormatBC6HRGBFloat         TextureFormat = 0x00000037
	TextureFormatBC7RGBAUnorm         TextureFormat = 0x00000038
	TextureFormatBC7RGBAUnormSrgb     TextureFormat = 0x00000039
	TextureFormatETC2RGB8Unorm        TextureFormat = 0x0000003A
	TextureFormatETC2RGB8UnormSrgb    TextureFormat = 0x0000003B
	TextureFormatETC2RGB8A1Unorm      TextureFormat = 0x0000003C
	TextureFormatETC2RGB8A1UnormSrgb  TextureFormat = 0x0000003D
	TextureFormatETC2RGBA8Unorm       TextureFormat = 0x0000003E
	TextureFormatETC2RGBA8UnormSrgb   TextureFormat = 0x0000003F
	TextureFormatEACR11Unorm          TextureFormat = 0x00000040
	TextureFormatEACR11Snorm          TextureFormat = 0x00000041
	TextureFormatEACRG11Unorm         TextureFormat = 0x00000042
	TextureFormatEACRG11Snorm         TextureFormat = 0x00000043
	TextureFormatASTC4x4Unorm         TextureFormat = 0x00000044
	TextureFormatASTC4x4UnormSrgb     TextureFormat = 0x00000045
	TextureFormatASTC5x4Unorm         TextureFormat = 0x00000046
	TextureFormatASTC5x4UnormSrgb     TextureFormat = 0x00000047
	TextureFormatASTC5x5Unorm         TextureFormat = 0x00000048
	TextureFormatASTC5x5UnormSrgb     TextureFormat = 0x00000049
	TextureFormatASTC6x5Unorm         TextureFormat = 0x0000004A
	TextureFormatASTC6x5UnormSrgb     TextureFormat = 0x0000004B
	TextureFormatASTC6x6Unorm         TextureFormat = 0x0000004C
	TextureFormatASTC6x6UnormSrgb     TextureFormat = 0x0000004D
	TextureFormatASTC8x5Unorm         TextureFormat = 0x0000004E
	TextureFormatASTC8x5UnormSrgb     TextureFormat = 0x0000004F
	TextureFormatASTC8x6Unorm         TextureFormat = 0x00000050
	TextureFormatASTC8x6UnormSrgb     TextureFormat = 0x00000051
	TextureFormatASTC8x8Unorm         TextureFormat = 0x00000052
	TextureFormatASTC8x8UnormSrgb     TextureFormat = 0x00000053
	TextureFormatASTC10x5Unorm        TextureFormat = 0x00000054
	TextureFormatASTC10x5UnormSrgb    TextureFormat = 0x00000055
	TextureFormatASTC10x6Unorm        TextureFormat = 0x00000056
	TextureFormatASTC10x6UnormSrgb    TextureFormat = 0x00000057
	TextureFormatASTC10x8Unorm        TextureFormat = 0x00000058
	TextureFormatASTC10x8UnormSrgb    TextureFormat = 0x00000059
	TextureFormatASTC10x10Unorm       TextureFormat = 0x0000005A
	TextureFormatASTC10x10UnormSrgb   TextureFormat = 0x0000005B
	TextureFormatASTC12x10Unorm       TextureFormat = 0x0000005C
	TextureFormatASTC12x10UnormSrgb   TextureFormat = 0x0000005D
	TextureFormatASTC12x12Unorm       TextureFormat = 0x0000005E
	TextureFormatASTC12x12UnormSrgb   TextureFormat = 0x0000005F
)

func (v TextureFormat) String() string {
	switch v {
	case TextureFormatUndefined:
		return "undefined"
	case TextureFormatR8Unorm:
		return "r8unorm"
	case TextureFormatR8Snorm:
		return "r8snorm"
	case TextureFormatR8Uint:
		return "r8uint"
	case TextureFormatR8Sint:
		return "r8sint"
	case TextureFormatR16Uint:
		return "r16uint"
	case TextureFormatR16Sint:
		return "r16sint"
	case TextureFormatR16Float:
		return "r16float"
	case TextureFormatRG8Unorm:
		return "rg8unorm"
	case TextureFormatRG8Snorm:
		return "rg8snorm"
	case TextureFormatRG8Uint:
		return "rg8uint"
	case TextureFormatRG8Sint:
		return "rg8sint"
	case TextureFormatR32Float:
		return "r32float"
	case TextureFormatR32Uint:
		return "r32uint"
	case TextureFormatR32Sint:
		return "r32sint"
	case TextureFormatRG16Uint:
		return "rg16uint"
	case TextureFormatRG16Sint:
		return "rg16sint"
	case TextureFormatRG16Float:
		return "rg16float"
	case TextureFormatRGBA8Unorm:
		return "rgba8unorm"
	case TextureFormatRGBA8UnormSrgb:
		return "rgba8unorm-srgb"
	case TextureFormatRGBA8Snorm:
		return "rgba8snorm"
	case TextureFormatRGBA8Uint:
		return "rgba8uint"
	case TextureFormatRGBA8Sint:
		return "rgba8sint"
	case TextureFormatBGRA8Unorm:
		return "bgra8unorm"
	case TextureFormatBGRA8UnormSrgb:
		return "bgra8unorm-srgb"
	case TextureFormatRGB10A2Uint:
		return "rgb10a2uint"
	case TextureFormatRGB10A2Unorm:
		return "rgb10a2unorm"
	case TextureFormatRG11B10Ufloat:
		return "rg11b10ufloat"
	case TextureFormatRGB9E5Ufloat:
		return "rgb9e5ufloat"
	case TextureFormatRG32Float:
		return "rg32float"
	case TextureFormatRG32Uint:
		return "rg32uint"
	case TextureFormatRG32Sint:
		return "rg32sint"
	case TextureFormatRGBA16Uint:
		return "rgba16uint"
	case TextureFormatRGBA16Sint:
		return "rgba16sint"
	case TextureFormatRGBA16Float:
		return "rgba16float"
	case TextureFormatRGBA32Float:
		return "rgba32float"
	case TextureFormatRGBA32Uint:
		return "rgba32uint"
	case TextureFormatRGBA32Sint:
		return "rgba32sint"
	case TextureFormatStencil8:
		return "stencil8"
	case TextureFormatDepth16Unorm:
		return "depth16unorm"
	case TextureFormatDepth24Plus:
		return "depth24plus"
	case TextureFormatDepth24PlusStencil8:
		return "depth24plus-stencil8"
	case TextureFormatDepth32Float:
		return "depth32float"
	case TextureFormatDepth32FloatStencil8:
		return "depth32float-stencil8"
	case TextureFormatBC1RGBAUnorm:
		return "bc1rgba-unorm"
	case TextureFormatBC1RGBAUnormSrgb:
		return "bc1rgba-unorm-srgb"
	case TextureFormatBC2RGBAUnorm:
		return "bc2rgba-unorm"
	case TextureFormatBC2RGBAUnormSrgb:
		return "bc2rgba-unorm-srgb"
	case TextureFormatBC3RGBAUnorm:
		return "bc3rgba-unorm"
	case TextureFormatBC3RGBAUnormSrgb:
		return "bc3rgba-unorm-srgb"
	case TextureFormatBC4RUnorm:
		return "bc4r-unorm"
	case TextureFormatBC4RSnorm:
		return "bc4r-snorm"
	case TextureFormatBC5RGUnorm:
		return "bc5rg-unorm"
	case TextureFormatBC5RGSnorm:
		return "bc5rg-snorm"
	case TextureFormatBC6HRGBUfloat:
		return "bc6hrgb-ufloat"
	case TextureFormatBC6HRGBFloat:
		return "bc6hrgb-float"
	case TextureFormatBC7RGBAUnorm:
		return "bc7rgba-unorm"
	case TextureFormatBC7RGBAUnormSrgb:
		return "bc7rgba-unorm-srgb"
	case TextureFormatETC2RGB8Unorm:
		return "etc2rgb8unorm"
	case TextureFormatETC2RGB8UnormSrgb:
		return "etc2rgb8unorm-srgb"
	case TextureFormatETC2RGB8A1Unorm:
		return "etc2rgb8a1unorm"
	case TextureFormatETC2RGB8A1UnormSrgb:
		return "etc2rgb8a1unorm-srgb"
	case TextureFormatETC2RGBA8Unorm:
		return "etc2rgba8unorm"
	case TextureFormatETC2RGBA8UnormSrgb:
		return "etc2rgba8unorm-srgb"
	case TextureFormatEACR11Unorm:
		return "eacr11unorm"
	case TextureFormatEACR11Snorm:
		return "eacr11snorm"
	case TextureFormatEACRG11Unorm:
		return "eacrg11unorm"
	case TextureFormatEACRG11Snorm:
		return "eacrg11snorm"
	case TextureFormatASTC4x4Unorm:
		return "astc4x4unorm"
	case TextureFormatASTC4x4UnormSrgb:
		return "astc4x4unorm-srgb"
	case TextureFormatASTC5x4Unorm:
		return "astc5x4unorm"
	case TextureFormatASTC5x4UnormSrgb:
		return "astc5x4unorm-srgb"
	case TextureFormatASTC5x5Unorm:
		return "astc5x5unorm"
	case TextureFormatASTC5x5UnormSrgb:
		return "astc5x5unorm-srgb"
	case TextureFormatASTC6x5Unorm:
		return "astc6x5unorm"
	case TextureFormatASTC6x5UnormSrgb:
		return "astc6x5unorm-srgb"
	case TextureFormatASTC6x6Unorm:
		return "astc6x6unorm"
	case TextureFormatASTC6x6UnormSrgb:
		return "astc6x6unorm-srgb"
	case TextureFormatASTC8x5Unorm:
		return "astc8x5unorm"
	case TextureFormatASTC8x5UnormSrgb:
		return "astc8x5unorm-srgb"
	case TextureFormatASTC8x6Unorm:
		return "astc8x6unorm"
	case TextureFormatASTC8x6UnormSrgb:
		return "astc8x6unorm-srgb"
	case TextureFormatASTC8x8Unorm:
		return "astc8x8unorm"
	case TextureFormatASTC8x8UnormSrgb:
		return "astc8x8unorm-srgb"
	case TextureFormatASTC10x5Unorm:
		return "astc10x5unorm"
	case TextureFormatASTC10x5UnormSrgb:
		return "astc10x5unorm-srgb"
	case TextureFormatASTC10x6Unorm:
		return "astc10x6unorm"
	case TextureFormatASTC10x6UnormSrgb:
		return "astc10x6unorm-srgb"
	case TextureFormatASTC10x8Unorm:
		return "astc10x8unorm"
	case TextureFormatASTC10x8UnormSrgb:
		return "astc10x8unorm-srgb"
	case TextureFormatASTC10x10Unorm:
		return "astc10x10unorm"
	case TextureFormatASTC10x10UnormSrgb:
		return "astc10x10unorm-srgb"
	case TextureFormatASTC12x10Unorm:
		return "astc12x10unorm"
	case TextureFormatASTC12x10UnormSrgb:
		return "astc12x10unorm-srgb"
	case TextureFormatASTC12x12Unorm:
		return "astc12x12unorm"
	case TextureFormatASTC12x12UnormSrgb:
		return "astc12x12unorm-srgb"
	default:
		return ""
	}
}

type TextureSampleType uint32

const (
	TextureSampleTypeBindingNotUsed    TextureSampleType = 0x00000000
	TextureSampleTypeUndefined         TextureSampleType = 0x00000001
	TextureSampleTypeFloat             TextureSampleType = 0x00000002
	TextureSampleTypeUnfilterableFloat TextureSampleType = 0x00000003
	TextureSampleTypeDepth             TextureSampleType = 0x00000004
	TextureSampleTypeSint              TextureSampleType = 0x00000005
	TextureSampleTypeUint              TextureSampleType = 0x00000006
)

func (v TextureSampleType) String() string {
	switch v {
	case TextureSampleTypeBindingNotUsed:
		return "binding-not-used"
	case TextureSampleTypeUndefined:
		return "undefined"
	case TextureSampleTypeFloat:
		return "float"
	case TextureSampleTypeUnfilterableFloat:
		return "unfilterable-float"
	case TextureSampleTypeDepth:
		return "depth"
	case TextureSampleTypeSint:
		return "sint"
	case TextureSampleTypeUint:
		return "uint"
	default:
		return ""
	}
}

type TextureViewDimension uint32

const (
	TextureViewDimensionUndefined TextureViewDimension = 0x00000000
	TextureViewDimension1D        TextureViewDimension = 0x00000001
	TextureViewDimension2D        TextureViewDimension = 0x00000002
	TextureViewDimension2DArray   TextureViewDimension = 0x00000003
	TextureViewDimensionCube      TextureViewDimension = 0x00000004
	TextureViewDimensionCubeArray TextureViewDimension = 0x00000005
	TextureViewDimension3D        TextureViewDimension = 0x00000006
)

func (v TextureViewDimension) String() string {
	switch v {
	case TextureViewDimensionUndefined:
		return "undefined"
	case TextureViewDimension1D:
		return "1d"
	case TextureViewDimension2D:
		return "2d"
	case TextureViewDimension2DArray:
		return "2d-array"
	case TextureViewDimensionCube:
		return "cube"
	case TextureViewDimensionCubeArray:
		return "cube-array"
	case TextureViewDimension3D:
		return "3d"
	default:
		return ""
	}
}

type VertexFormat uint32

const (
	VertexFormatUint8        VertexFormat = 0x00000001
	VertexFormatUint8x2      VertexFormat = 0x00000002
	VertexFormatUint8x4      VertexFormat = 0x00000003
	VertexFormatSint8        VertexFormat = 0x00000004
	VertexFormatSint8x2      VertexFormat = 0x00000005
	VertexFormatSint8x4      VertexFormat = 0x00000006
	VertexFormatUnorm8       VertexFormat = 0x00000007
	VertexFormatUnorm8x2     VertexFormat = 0x00000008
	VertexFormatUnorm8x4     VertexFormat = 0x00000009
	VertexFormatSnorm8       VertexFormat = 0x0000000A
	VertexFormatSnorm8x2     VertexFormat = 0x0000000B
	VertexFormatSnorm8x4     VertexFormat = 0x0000000C
	VertexFormatUint16       VertexFormat = 0x0000000D
	VertexFormatUint16x2     VertexFormat = 0x0000000E
	VertexFormatUint16x4     VertexFormat = 0x0000000F
	VertexFormatSint16       VertexFormat = 0x00000010
	VertexFormatSint16x2     VertexFormat = 0x00000011
	VertexFormatSint16x4     VertexFormat = 0x00000012
	VertexFormatUnorm16      VertexFormat = 0x00000013
	VertexFormatUnorm16x2    VertexFormat = 0x00000014
	VertexFormatUnorm16x4    VertexFormat = 0x00000015
	VertexFormatSnorm16      VertexFormat = 0x00000016
	VertexFormatSnorm16x2    VertexFormat = 0x00000017
	VertexFormatSnorm16x4    VertexFormat = 0x00000018
	VertexFormatFloat16      VertexFormat = 0x00000019
	VertexFormatFloat16x2    VertexFormat = 0x0000001A
	VertexFormatFloat16x4    VertexFormat = 0x0000001B
	VertexFormatFloat32      VertexFormat = 0x0000001C
	VertexFormatFloat32x2    VertexFormat = 0x0000001D
	VertexFormatFloat32x3    VertexFormat = 0x0000001E
	VertexFormatFloat32x4    VertexFormat = 0x0000001F
	VertexFormatUint32       VertexFormat = 0x00000020
	VertexFormatUint32x2     VertexFormat = 0x00000021
	VertexFormatUint32x3     VertexFormat = 0x00000022
	VertexFormatUint32x4     VertexFormat = 0x00000023
	VertexFormatSint32       VertexFormat = 0x00000024
	VertexFormatSint32x2     VertexFormat = 0x00000025
	VertexFormatSint32x3     VertexFormat = 0x00000026
	VertexFormatSint32x4     VertexFormat = 0x00000027
	VertexFormatUnorm1010102 VertexFormat = 0x00000028
	VertexFormatUnorm8x4BGRA VertexFormat = 0x00000029
)

func (v VertexFormat) String() string {
	switch v {
	case VertexFormatUint8:
		return "uint8"
	case VertexFormatUint8x2:
		return "uint8x2"
	case VertexFormatUint8x4:
		return "uint8x4"
	case VertexFormatSint8:
		return "sint8"
	case VertexFormatSint8x2:
		return "sint8x2"
	case VertexFormatSint8x4:
		return "sint8x4"
	case VertexFormatUnorm8:
		return "unorm8"
	case VertexFormatUnorm8x2:
		return "unorm8x2"
	case VertexFormatUnorm8x4:
		return "unorm8x4"
	case VertexFormatSnorm8:
		return "snorm8"
	case VertexFormatSnorm8x2:
		return "snorm8x2"
	case VertexFormatSnorm8x4:
		return "snorm8x4"
	case VertexFormatUint16:
		return "uint16"
	case VertexFormatUint16x2:
		return "uint16x2"
	case VertexFormatUint16x4:
		return "uint16x4"
	case VertexFormatSint16:
		return "sint16"
	case VertexFormatSint16x2:
		return "sint16x2"
	case VertexFormatSint16x4:
		return "sint16x4"
	case VertexFormatUnorm16:
		return "unorm16"
	case VertexFormatUnorm16x2:
		return "unorm16x2"
	case VertexFormatUnorm16x4:
		return "unorm16x4"
	case VertexFormatSnorm16:
		return "snorm16"
	case VertexFormatSnorm16x2:
		return "snorm16x2"
	case VertexFormatSnorm16x4:
		return "snorm16x4"
	case VertexFormatFloat16:
		return "float16"
	case VertexFormatFloat16x2:
		return "float16x2"
	case VertexFormatFloat16x4:
		return "float16x4"
	case VertexFormatFloat32:
		return "float32"
	case VertexFormatFloat32x2:
		return "float32x2"
	case VertexFormatFloat32x3:
		return "float32x3"
	case VertexFormatFloat32x4:
		return "float32x4"
	case VertexFormatUint32:
		return "uint32"
	case VertexFormatUint32x2:
		return "uint32x2"
	case VertexFormatUint32x3:
		return "uint32x3"
	case VertexFormatUint32x4:
		return "uint32x4"
	case VertexFormatSint32:
		return "sint32"
	case VertexFormatSint32x2:
		return "sint32x2"
	case VertexFormatSint32x3:
		return "sint32x3"
	case VertexFormatSint32x4:
		return "sint32x4"
	case VertexFormatUnorm1010102:
		return "unorm1010102"
	case VertexFormatUnorm8x4BGRA:
		return "unorm8x4bgra"
	default:
		return ""
	}
}

type VertexStepMode uint32

const (
	VertexStepModeVertexBufferNotUsed VertexStepMode = 0x00000000
	VertexStepModeUndefined           VertexStepMode = 0x00000001
	VertexStepModeVertex              VertexStepMode = 0x00000002
	VertexStepModeInstance            VertexStepMode = 0x00000003
)

func (v VertexStepMode) String() string {
	switch v {
	case VertexStepModeVertexBufferNotUsed:
		return "vertex-buffer-not-used"
	case VertexStepModeUndefined:
		return "undefined"
	case VertexStepModeVertex:
		return "vertex"
	case VertexStepModeInstance:
		return "instance"
	default:
		return ""
	}
}

type WGSLLanguageFeatureName uint32

const (
	WGSLLanguageFeatureNameReadonlyAndReadwriteStorageTextures WGSLLanguageFeatureName = 0x00000001
	WGSLLanguageFeatureNamePacked4x8IntegerDotProduct          WGSLLanguageFeatureName = 0x00000002
	WGSLLanguageFeatureNameUnrestrictedPointerParameters       WGSLLanguageFeatureName = 0x00000003
	WGSLLanguageFeatureNamePointerCompositeAccess              WGSLLanguageFeatureName = 0x00000004
)

func (v WGSLLanguageFeatureName) String() string {
	switch v {
	case WGSLLanguageFeatureNameReadonlyAndReadwriteStorageTextures:
		return "readonly-and-readwrite-storage-textures"
	case WGSLLanguageFeatureNamePacked4x8IntegerDotProduct:
		return "packed4x8integer-dot-product"
	case WGSLLanguageFeatureNameUnrestrictedPointerParameters:
		return "unrestricted-pointer-parameters"
	case WGSLLanguageFeatureNamePointerCompositeAccess:
		return "pointer-composite-access"
	default:
		return ""
	}
}

type WaitStatus uint32

const (
	WaitStatusSuccess                 WaitStatus = 0x00000001
	WaitStatusTimedOut                WaitStatus = 0x00000002
	WaitStatusUnsupportedTimeout      WaitStatus = 0x00000003
	WaitStatusUnsupportedCount        WaitStatus = 0x00000004
	WaitStatusUnsupportedMixedSources WaitStatus = 0x00000005
)

func (v WaitStatus) String() string {
	switch v {
	case WaitStatusSuccess:
		return "success"
	case WaitStatusTimedOut:
		return "timed-out"
	case WaitStatusUnsupportedTimeout:
		return "unsupported-timeout"
	case WaitStatusUnsupportedCount:
		return "unsupported-count"
	case WaitStatusUnsupportedMixedSources:
		return "unsupported-mixed-sources"
	default:
		return ""
	}
}

type BufferUsage uint64
const (
	BufferUsageNone         BufferUsage = 0x0000000000000000
	BufferUsageMapRead      BufferUsage = 0x0000000000000001
	BufferUsageMapWrite     BufferUsage = 0x0000000000000002
	BufferUsageCopySrc      BufferUsage = 0x0000000000000004
	BufferUsageCopyDst      BufferUsage = 0x0000000000000008
	BufferUsageIndex        BufferUsage = 0x0000000000000010
	BufferUsageVertex       BufferUsage = 0x0000000000000020
	BufferUsageUniform      BufferUsage = 0x0000000000000040
	BufferUsageStorage      BufferUsage = 0x0000000000000080
	BufferUsageIndirect     BufferUsage = 0x0000000000000100
	BufferUsageQueryResolve BufferUsage = 0x0000000000000200
)

type ColorWriteMask uint64
const (
	ColorWriteMaskNone  ColorWriteMask = 0x0000000000000000
	ColorWriteMaskRed   ColorWriteMask = 0x0000000000000001
	ColorWriteMaskGreen ColorWriteMask = 0x0000000000000002
	ColorWriteMaskBlue  ColorWriteMask = 0x0000000000000004
	ColorWriteMaskAlpha ColorWriteMask = 0x0000000000000008
	ColorWriteMaskAll   ColorWriteMask = 0x000000000000000F /* Red | Green | Blue | Alpha */
)

type MapMode uint64
const (
	MapModeNone  MapMode = 0x0000000000000000
	MapModeRead  MapMode = 0x0000000000000001
	MapModeWrite MapMode = 0x0000000000000002
)

type ShaderStage uint64
const (
	ShaderStageNone     ShaderStage = 0x0000000000000000
	ShaderStageVertex   ShaderStage = 0x0000000000000001
	ShaderStageFragment ShaderStage = 0x0000000000000002
	ShaderStageCompute  ShaderStage = 0x0000000000000004
)

type TextureUsage uint64
const (
	TextureUsageNone            TextureUsage = 0x0000000000000000
	TextureUsageCopySrc         TextureUsage = 0x0000000000000001
	TextureUsageCopyDst         TextureUsage = 0x0000000000000002
	TextureUsageTextureBinding  TextureUsage = 0x0000000000000004
	TextureUsageStorageBinding  TextureUsage = 0x0000000000000008
	TextureUsageRenderAttachment TextureUsage = 0x0000000000000010
)

type InstanceBackend uint32
const (
	WGPUInstanceBackend_All InstanceBackend = 0x00000000
	WGPUInstanceBackend_Vulkan InstanceBackend = 1 << 0
	WGPUInstanceBackend_GL InstanceBackend = 1 << 1
	WGPUInstanceBackend_Metal InstanceBackend = 1 << 2
	WGPUInstanceBackend_DX12 InstanceBackend = 1 << 3
	WGPUInstanceBackend_DX11 InstanceBackend = 1 << 4
	WGPUInstanceBackend_BrowserWebGPU InstanceBackend = 1 << 5
	WGPUInstanceBackend_Primary InstanceBackend = (1 << 0) | (1 << 2) | (1 << 3) | (1 << 5)
	WGPUInstanceBackend_Secondary InstanceBackend = (1 << 1) | (1 << 4)
	WGPUInstanceBackend_Force32 InstanceBackend = 0x7FFFFFFF
)

type InstanceFlag uint32
const (
	WGPUInstanceFlag_Default InstanceFlag = 0x00000000
	WGPUInstanceFlag_Debug InstanceFlag = 1 << 0
	WGPUInstanceFlag_Validation InstanceFlag = 1 << 1
	WGPUInstanceFlag_DiscardHalLabels InstanceFlag = 1 << 2
	WGPUInstanceFlag_Force32 InstanceFlag = 0x7FFFFFFF
)
